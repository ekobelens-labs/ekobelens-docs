#!/usr/bin/env node
import {execSync} from 'node:child_process';
import {writeFileSync, mkdirSync} from 'node:fs';
import {dirname, resolve} from 'node:path';

const OUTPUT_PATH = resolve('docs/api/_generated-changelog.mdx');
const MAX_COMMITS = 8;
const REPO_URL = 'https://github.com/ekobelens-labs/ekobelens-docs';

function getGitLog() {
  try {
    const raw = execSync(
      `git log --date=short --pretty=format:%cd%x1F%h%x1F%s --max-count=${MAX_COMMITS} -- docs/api specs/swagger.yaml`,
      {encoding: 'utf8'}
    );
    return raw
      .trim()
      .split('\n')
      .filter(Boolean)
      .map(line => {
        const [date, hash, ...messageParts] = line.split('');
        const message = messageParts.join('').trim();
        return {date: date.trim(), hash: hash.trim(), message};
      })
      .filter(entry => entry.message);
  } catch (error) {
    console.warn('[changelog] Unable to read git log:', error.message);
    return [];
  }
}

function formatEntry({date, hash, message}) {
  const shortMessage = message.charAt(0).toUpperCase() + message.slice(1);
  const url = `${REPO_URL}/commit/${hash}`;
  return `        <li><strong>${date}</strong> â€” <a href="${url}" target="_blank" rel="noopener noreferrer">${escapeHtml(
    shortMessage
  )}</a></li>`;
}

function escapeHtml(value) {
  return value
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
}

function buildContent(entries) {
  const header = `<!-- AUTOGENERATED FILE. DO NOT EDIT DIRECTLY. -->\n`;
  if (!entries.length) {
    return (
      header +
      `\nexport default function GeneratedChangelog() {\n  return (\n    <p>No tracked API documentation changes yet. Commit updates under <code>docs/api</code> or <code>specs/swagger.yaml</code> to populate this log.</p>\n  );\n}\n`
    );
  }

  const listItems = entries.map(formatEntry).join('\n');
  return (
    header +
    `\nexport default function GeneratedChangelog() {\n  return (\n    <ul className="doc-changelog">\n${listItems}\n    </ul>\n  );\n}\n`
  );
}

function ensureDirectory(filePath) {
  mkdirSync(dirname(filePath), {recursive: true});
}

function main() {
  const entries = getGitLog();
  const content = buildContent(entries);
  ensureDirectory(OUTPUT_PATH);
  writeFileSync(OUTPUT_PATH, content, 'utf8');
  console.log(`[changelog] Generated ${entries.length || '0'} entries at docs/api/_generated-changelog.mdx`);
}

main();
